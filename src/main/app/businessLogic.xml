<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd" version="EE-3.5.0">
    <data-mapper:config name="User_To_User" transformationGraphPath="user_to_user.grf" doc:name="User_To_User"/>
    <data-mapper:config name="User_To_User_1" transformationGraphPath="user_to_user_1.grf" doc:name="User_To_User_1"/>
    <data-mapper:config name="User_To_User_1User_To_User_2" transformationGraphPath="user_to_user_2.grf" doc:name="User_To_User_1User_To_User_2"/>
   
    <batch:job name="fromSalesforceToDBBatch" max-failed-records="1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>

            <batch:step name="getUserInDatabaseStep" >
                <expression-component doc:name="convert LastModifiedDate to Date"><![CDATA[f = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
 f.setTimeZone(TimeZone.getTimeZone("UTC")); 
 payload['LastModifiedDate'] = f.parse(payload['LastModifiedDate']); 
 ]]></expression-component> 
                <enricher source="#[payload.isEmpty() ? NullPayload.getInstance() : payload[0]]" target="#[recordVars['userInTargetInstance']]" doc:name="store user">
                    <db:select config-ref="Database" doc:name="query user from Database">
                        <db:parameterized-query><![CDATA[SELECT * FROM User WHERE Email = #[payload['Email']]]]></db:parameterized-query>


                    </db:select>
                </enricher>
                <expression-component doc:name="map ProfileId"><![CDATA[// We map the profile IDs from Salesforce to Database, each profileId from the left (source) will be map to the one on the right (target)
 profilesMap = ${from.sfdc.to.db.profilesMap}; 
 if (profilesMap) { 
 	payload.put('ProfileId', profilesMap.get(payload['ProfileId'])); 
 } 
 ]]></expression-component> 
            </batch:step>
            
            <batch:step name="updateUsersInDatabaseStep" accept-expression="!(recordVars['userInTargetInstance'] is NullPayload) &amp;&amp; recordVars['userInTargetInstance']['LastModifiedDate'] &lt; payload['LastModifiedDate'] &amp;&amp; '${sfdc.integration.user.id}' != payload.get('LastModifiedById')">
                <data-mapper:transform config-ref="User_To_User" doc:name="map Salesforce User To Database User"/>
                <expression-component doc:name="prepare user for update"><![CDATA[payload.put('Id', recordVars['userInTargetInstance'].get('Id'));
  ]]></expression-component> 
 
                <batch:commit size="200" doc:name="Batch Commit">
                    <db:update config-ref="Database" bulkMode="true" doc:name="update users in Database">
                        <db:parameterized-query><![CDATA[UPDATE User SET
  	Id = #[payload['Id']],  
  	Alias = #[payload['Alias']],  
  	Email = #[payload['Email']],  
  	EmailEncodingKey = #[payload['EmailEncodingKey']],  
  	FirstName = #[payload['FirstName']],  
  	LanguageLocaleKey = #[payload['LanguageLocaleKey']],  
  	LastModifiedById = CURRENT_USER,  
  	LastModifiedDate = CURRENT_TIMESTAMP,  
  	LastName = #[payload['LastName']],  
  	LocaleSidKey = #[payload['LocaleSidKey']],  
  	TimeZoneSidKey = #[payload['TimeZoneSidKey']],  
  	Username = #[payload['Username']],  
  	ProfileId = #[payload['ProfileId']],  
  	CommunityNickname = #[payload['CommunityNickname']]  
  WHERE Id = #[payload['Id']]]]></db:parameterized-query> 
 


                    </db:update>
                    <logger message="Update Database B response: #[payload]" level="INFO" doc:name="log response"/>
                </batch:commit>
            </batch:step>
            
            <batch:step name="insertUsersToDatabaseStep" accept-expression="recordVars['userInTargetInstance'] is NullPayload">
                <data-mapper:transform config-ref="User_To_User_1" doc:name="map Salesforce User To Database User"/>
                
                <batch:commit size="200" doc:name="Batch Commit">
                    <db:insert config-ref="Database" bulkMode="true" doc:name="insert users to Database">
                        <db:parameterized-query><![CDATA[INSERT INTO User(Id,Alias,Email,EmailEncodingKey,FirstName,LanguageLocaleKey,LastModifiedById,LastModifiedDate,LastName,LocaleSidKey,TimeZoneSidKey,Username,ProfileId,CommunityNickname)VALUES(UUID(),	#[payload['Alias']],#[payload['Email']],#[payload['EmailEncodingKey']],#[payload['FirstName']],#[payload['LanguageLocaleKey']],CURRENT_USER,CURRENT_TIMESTAMP,#[payload['LastName']],#[payload['LocaleSidKey']],#[payload['TimeZoneSidKey']],#[payload['Username']],#[payload['ProfileId']],#[payload['CommunityNickname']])]]></db:parameterized-query>
                    </db:insert>

                    <logger message="Insert Database B response: #[payload]" level="INFO" doc:name="log response"/>
                </batch:commit>
            </batch:step> 
        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="Expression"><![CDATA[app.registry['PollSynchronizer'].unlock();]]></expression-component>
        </batch:on-complete>
    </batch:job>
            
    <batch:job name="fromDBToSalesforceBatch" max-failed-records="1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
            <batch:step name="getUserInSalesforceStep">
                <enricher doc:name="Message Enricher" source="#[payload]" target="#[recordVars['userInTargetInstance']]">
                    <processor-chain doc:name="Processor Chain">
                        <sfdc:query-single config-ref="Salesforce" query="SELECT Id, Email, LastModifiedDate FROM User WHERE (Email = '#[payload['Email']]')" doc:name="query user from Salesforce"/>
                        <expression-component doc:name="convert LastModifiedDate to Date"><![CDATA[if (!(payload is NullPayload)) { 
  	f = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");  
  	f.setTimeZone(TimeZone.getTimeZone("UTC"));  
  	payload['LastModifiedDate'] = f.parse(payload['LastModifiedDate']);  
  }]]></expression-component> 
                    </processor-chain>
                </enricher>
            </batch:step>
            <batch:step name="Batch_Step">
            	<data-mapper:transform config-ref="User_To_User_1User_To_User_2" doc:name="map Database User To Salesforce User"/>
            	<expression-component doc:name="prepare user for upsert"><![CDATA[payload.remove('LastModifiedDate'); 
  payload.remove('LastModifiedById');  

  if(!(recordVars['userInTargetInstance'] is NullPayload)) { 
  	payload.put('Id',recordVars['userInTargetInstance'].get('Id')); 
  	payload.remove('Username');  
  	  } 

  // We map the profile IDs from Database to Salesforce, each profileId from the left (source) will be map to the one on the right (target)  
  profilesMap = ${from.db.to.sfdc.profilesMap};  
  if (profilesMap) {  
  	payload.put('ProfileId', profilesMap.get( payload['ProfileId'] ));  
  }  
  ]]></expression-component>
  				<batch:commit size="200" doc:name="Batch Commit">
                     <sfdc:upsert config-ref="Salesforce" externalIdFieldName="Id" type="User" doc:name="upsert user in Salesforce"> 
                         <sfdc:objects ref="#[payload]"/> 
                     </sfdc:upsert> 
                    <logger message="Upsert Salesforce A response: #[payload]" level="INFO" doc:name="log response"/> 
                </batch:commit>
            </batch:step>
            
            
            
        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="release lock"><![CDATA[app.registry['PollSynchronizer'].unlock();]]></expression-component>
        </batch:on-complete>
    </batch:job>
    
</mule>
