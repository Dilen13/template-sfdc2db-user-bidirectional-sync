<?xml version="1.0" encoding="UTF-8"?>

<mule version="EE-3.7.1"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" 
	xmlns:db="http://www.mulesoft.org/schema/mule/db" 
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" 
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">

   
    <batch:job name="fromSalesforceToDBBatch" max-failed-records="1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>

            <batch:step name="getUserInDatabaseStep" >
 
                <enricher   doc:name="save Id and LastModifiedDate to payload">
                    <db:select config-ref="Database" doc:name="query user from Database">
                        <db:parameterized-query><![CDATA[SELECT * FROM User WHERE Email = #[payload.Email]]]></db:parameterized-query>



                    </db:select>
                    <enrich source="#[payload.isEmpty() ? null : payload[0].Id]" target="#[payload.IdInDB]"/>
                    <enrich source="#[payload.isEmpty() ? null : payload[0].LastModifiedDate]" target="#[payload.LastModifiedDateInDB]"/>
                </enricher>

 
            </batch:step>
            <batch:step name="prepareToUpsertIntoDBStep">
                <enricher target="#[payload.ProfileId]" doc:name="Enrich payload with ProfileId">
                    <set-payload value="#[ ${from.sfdc.to.db.profilesMap} instanceof java.lang.Boolean ?  payload.ProfileId : ${from.sfdc.to.db.profilesMap}.get(payload.ProfileId)]" doc:name="load profile ID based on property value"/>
                </enricher>
                <dw:transform-message doc:name="map SFDC User to DB User">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	(Id					: payload.IdInDB) when payload.IdInDB != null,
	Name 				: payload.Name,
	Username 			: payload.Username,
	FirstName 			: payload.FirstName,
	LastName 			: payload.LastName,
	Alias 				: payload.Alias,
	CommunityNickname 	: payload.CommunityNickname,
	Email 				: payload.Email,
	EmailEncodingKey 	: payload.EmailEncodingKey,
	LanguageLocaleKey 	: payload.LanguageLocaleKey,
	LocaleSidKey 		: payload.LocaleSidKey,
	ProfileId			: payload.ProfileId,
	TimeZoneSidKey 		: payload.TimeZoneSidKey
}]]></dw:set-payload>
                </dw:transform-message>
            </batch:step>
            
            <batch:step name="updateUsersInDatabaseStep" accept-expression="(payload.IdInDB != null &amp;&amp; org.mule.templates.date.DateUtils.ISOStringDateToDateTime(payload.LastModifiedDate).isAfter(org.mule.templates.date.DateUtils.dateToDateTime(payload.LastModifiedDateInDB)) &amp;&amp; '${sfdc.integration.user.id}' != payload.LastModifiedById)">
 
 
                <batch:commit size="200" doc:name="Batch Commit">

                    <db:update config-ref="Database" bulkMode="true" doc:name="update users in Database">
                        <db:parameterized-query><![CDATA[UPDATE User SET
  	Id 					= #[payload.Id],  
  	Alias 				= #[payload.Alias],  
  	Email 				= #[payload.Email],  
  	EmailEncodingKey 	= #[payload.EmailEncodingKey],  
  	FirstName 			= #[payload.FirstName],  
  	LanguageLocaleKey 	= #[payload.LanguageLocaleKey],  
  	LastModifiedById 	= CURRENT_USER,  
  	LastModifiedDate 	= CURRENT_TIMESTAMP,  
  	LastName 			= #[payload.LastName],  
  	LocaleSidKey 		= #[payload.LocaleSidKey],  
  	TimeZoneSidKey 		= #[payload.TimeZoneSidKey],  
  	Username 			= #[payload.Username],  
  	ProfileId 			= #[payload.ProfileId],  
  	CommunityNickname 	= #[payload.CommunityNickname]  
  WHERE Id = #[payload.Id]]]></db:parameterized-query>


 
 


                    </db:update>
                    <logger message="Update Database response: #[payload]" level="INFO" doc:name="log response"/>
                </batch:commit>
            </batch:step>
            
            <batch:step name="insertUsersToDatabaseStep" accept-expression="payload.IdInDB == null">


                
                <batch:commit size="200" doc:name="Batch Commit">

                    <db:insert config-ref="Database" bulkMode="true" doc:name="insert users to Database">
                        <db:parameterized-query><![CDATA[INSERT INTO User(Id,Alias,Email,EmailEncodingKey,FirstName,LanguageLocaleKey,LastModifiedById,LastModifiedDate,LastName,LocaleSidKey,TimeZoneSidKey,Username,ProfileId,CommunityNickname)
VALUES(
UUID(),	
#[payload.Alias],
#[payload.Email],
#[payload.EmailEncodingKey],
#[payload.FirstName],
#[payload.LanguageLocaleKey],
CURRENT_USER,CURRENT_TIMESTAMP,
#[payload.LastName],
#[payload.LocaleSidKey],
#[payload.TimeZoneSidKey],
#[payload.Username],
#[payload.ProfileId],
#[payload.CommunityNickname]
)]]></db:parameterized-query>



                    </db:insert>

                    <logger message="Insert Database response: #[payload]" level="INFO" doc:name="log response"/>
                </batch:commit>
            </batch:step> 
        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="release lock"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
        </batch:on-complete>
    </batch:job>
            
    <batch:job name="fromDBToSalesforceBatch" max-failed-records="1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
            <batch:step name="getUserInSalesforceStep">
                <enricher doc:name="save Id and LastModifiedDate to payload"  >
                    <sfdc:query-single config-ref="Salesforce" query="SELECT Id, Email, LastModifiedDate FROM User WHERE (Email = '#[payload.Email]')" doc:name="query user from Salesforce"/>
                    <enrich source="#[payload == null ? null : payload.Id]" target="payload.IdInSFDC"/>
                    <enrich source="#[payload == null ? null : payload.LastModifiedDate]" target="payload.LastModifiedDateInSFDC"/>
                </enricher>

            </batch:step>
            <batch:step name="prepareToUpsertIntoSFDCStep">
                <enricher target="#[payload.ProfileId]" doc:name="enrich payload with ProfileId">
                    <set-payload value="#[ ${from.db.to.sfdc.profilesMap} instanceof java.lang.Boolean ?  payload.ProfileId : ${from.db.to.sfdc.profilesMap}.get(payload.ProfileId)]" doc:name="load profile ID based on property value"/>
                </enricher>
                <dw:transform-message doc:name="map DB User to SFDC User">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	(Id 				: payload.IdInSFDC) when payload.IdInSFDC != null,
	(Username 			: payload.Username) when payload.IdInSFDC == null,
	Name 				: payload.Name,
	FirstName 			: payload.FirstName,
	Alias 				: payload.Alias,
	LastName 			: payload.LastName,
	CommunityNickname 	: payload.CommunityNickname,
	Email 				: payload.Email,
	EmailEncodingKey 	: payload.EmailEncodingKey,
	LanguageLocaleKey 	: payload.LanguageLocaleKey,
	LocaleSidKey 		: payload.LocaleSidKey,
	ProfileId 			: payload.ProfileId,
	TimeZoneSidKey 		: payload.TimeZoneSidKey
}]]></dw:set-payload>
                </dw:transform-message>
            </batch:step>
            <batch:step name="upsertUserInSalesforceStep" accept-expression="payload.IdInSFDC == null ? true : org.mule.templates.util.DateUtils.compareDates(payload.LastModifiedDateInSFDC, payload.LastModifiedDate, '${system.time.zone}') &amp;&amp; '${db.integration.user.id}' != payload.LastModifiedById">

                <batch:commit size="200" doc:name="Batch Commit">


                     <sfdc:upsert config-ref="Salesforce" externalIdFieldName="Id" type="User" doc:name="upsert user in Salesforce"> 
                         <sfdc:objects ref="#[payload]"/> 
                     </sfdc:upsert> 
                    <logger message="Upsert Salesforce response: #[payload]" level="INFO" doc:name="log response"/> 
                </batch:commit>
            </batch:step>
            
            
            
        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="release lock"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
        </batch:on-complete>
    </batch:job>
    
</mule>
